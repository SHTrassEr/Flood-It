// Generated by CoffeeScript 1.2.1-pre
(function() {
  var FloodIt, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (root.FloodIt === void 0) root.FloodIt = {};

  FloodIt = root.FloodIt;

  FloodIt.Cell = (function() {

    Cell.name = 'Cell';

    function Cell(rowIndex, columnIndex) {
      this.rowIndex = rowIndex;
      this.columnIndex = columnIndex;
    }

    Cell.prototype.left = function() {
      return new FloodIt.Cell(this.rowIndex, this.columnIndex - 1);
    };

    Cell.prototype.right = function() {
      return new FloodIt.Cell(this.rowIndex, this.columnIndex + 1);
    };

    Cell.prototype.up = function() {
      return new FloodIt.Cell(this.rowIndex - 1, this.columnIndex);
    };

    Cell.prototype.down = function() {
      return new FloodIt.Cell(this.rowIndex + 1, this.columnIndex);
    };

    return Cell;

  })();

  FloodIt.PlayGround = (function() {

    PlayGround.name = 'PlayGround';

    function PlayGround(rowCount, columnCount) {
      var columnIndex, rowIndex, _i, _j, _ref, _ref2;
      this.rowCount = rowCount;
      this.columnCount = columnCount;
      this.playGround = [];
      for (rowIndex = _i = 0, _ref = this.rowCount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; rowIndex = 0 <= _ref ? ++_i : --_i) {
        this.playGround.push([]);
        for (columnIndex = _j = 0, _ref2 = this.columnCount - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; columnIndex = 0 <= _ref2 ? ++_j : --_j) {
          this.playGround[rowIndex].push(0);
        }
      }
    }

    PlayGround.prototype.isCellInPlayGround = function(cell) {
      if (!cell instanceof FloodIt.Cell) {
        throw new Error("ArgumentException: cell is not instance of FloodIt.Cell");
      }
      if (cell.columnIndex < 0 || cell.columnIndex >= this.columnCount) {
        return false;
      }
      if (cell.rowIndex < 0 || cell.rowIndex >= this.rowCount) return false;
      return true;
    };

    PlayGround.prototype.getCellValue = function(cell) {
      if (this.isCellInPlayGround(cell) === true) {
        return this.playGround[cell.rowIndex][cell.columnIndex];
      } else {
        throw new Error("ArgumentException: cell");
      }
    };

    PlayGround.prototype.setCellValue = function(cell, value) {
      if (this.isCellInPlayGround(cell) === true) {
        this.playGround[cell.rowIndex][cell.columnIndex] = value;
        return value;
      } else {
        throw new Error("ArgumentException: cell");
      }
    };

    return PlayGround;

  })();

  FloodIt.Player = (function() {

    Player.name = 'Player';

    function Player(name, startCell, currentValue) {
      this.name = name;
      this.startCell = startCell;
      this.currentValue = currentValue;
    }

    return Player;

  })();

  FloodIt.Game = (function() {

    Game.name = 'Game';

    function Game(rowCount, columnCount) {
      this.colorsCount = 4;
      this.playGround = new FloodIt.PlayGround(rowCount, columnCount);
      this.playersCount = 2;
      this.players = [new FloodIt.Player("Player1"), new FloodIt.Player("Player2")];
      this.currentPlayerId = 0;
    }

    return Game;

  })();

  FloodIt.Core = (function() {
    var floodFill;

    Core.name = 'Core';

    function Core() {}

    floodFill = function(playGround, currentCell, targetValue, replacementValue) {
      if (!playGround.isCellInPlayGround(currentCell)) return;
      if (playGround.getCellValue(currentCell) !== targetValue) return;
      playGround.setCellValue(currentCell, replacementValue);
      floodFill(playGround, currentCell.left(), targetValue, replacementValue);
      floodFill(playGround, currentCell.right(), targetValue, replacementValue);
      floodFill(playGround, currentCell.up(), targetValue, replacementValue);
      return floodFill(playGround, currentCell.down(), targetValue, replacementValue);
    };

    Core.flood = function(playGround, startCell, replacementValue) {
      if (playGround.getCellValue(startCell) === replacementValue) return;
      floodFill(playGround, startCell, playGround.getCellValue(startCell), replacementValue);
      return playGround;
    };

    return Core;

  })();

  FloodIt.Map = (function() {
    var fillPlayGround, initPlayers;

    Map.name = 'Map';

    function Map() {}

    fillPlayGround = function(game) {
      var columnIndex, rowIndex, _i, _ref, _results;
      _results = [];
      for (rowIndex = _i = 0, _ref = game.playGround.rowCount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; rowIndex = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref2, _results2;
          _results2 = [];
          for (columnIndex = _j = 0, _ref2 = game.playGround.columnCount - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; columnIndex = 0 <= _ref2 ? ++_j : --_j) {
            _results2.push(game.playGround.setCellValue(new FloodIt.Cell(rowIndex, columnIndex), Math.floor(Math.random() * game.colorsCount)));
          }
          return _results2;
        })());
      }
      return _results;
    };

    initPlayers = function(game) {
      game.players[0].startCell = new FloodIt.Cell(0, 0);
      game.players[1].startCell = new FloodIt.Cell(game.playGround.rowCount - 1, game.playGround.columnCount - 1);
      game.players[0].currentValue = game.playGround.getCellValue(game.players[0].startCell);
      return game.players[1].currentValue = game.playGround.getCellValue(game.players[1].startCell);
    };

    Map.init = function(game) {
      fillPlayGround(game);
      return initPlayers(game);
    };

    return Map;

  })();

  FloodIt.Engine = (function() {

    Engine.name = 'Engine';

    function Engine() {}

    Engine.step = function(game, selectedValue) {
      if (!FloodIt.Engine.isValidSelectedValue(game, selectedValue)) return;
      FloodIt.Core.flood(game.playGround, game.players[game.currentPlayerId].startCell, selectedValue);
      FloodIt.Engine.updatePlayersColor(game);
      return FloodIt.Engine.switchPlayer(game);
    };

    Engine.switchPlayer = function(game) {
      if (game.currentPlayerId < game.playersCount - 1) {
        return game.currentPlayerId++;
      } else {
        return game.currentPlayerId = 0;
      }
    };

    Engine.updatePlayersColor = function(game) {
      return game.players.forEach(function(player, i) {
        return player.currentValue = game.playGround.getCellValue(player.startCell);
      });
    };

    Engine.isValidSelectedValue = function(game, selectedValue) {
      var player, _i, _len, _ref;
      _ref = game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (selectedValue === player.currentValue) return false;
      }
      return true;
    };

    return Engine;

  })();

}).call(this);
