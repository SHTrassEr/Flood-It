// Generated by CoffeeScript 1.2.1-pre
(function() {
  var FloodIt, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.FloodIt = {};

  FloodIt = root.FloodIt;

  FloodIt.Point = (function() {

    Point.name = 'Point';

    function Point(rowIndex, columnIndex) {
      this.rowIndex = rowIndex;
      this.columnIndex = columnIndex;
    }

    Point.prototype.left = function() {
      return new FloodIt.Point(this.rowIndex, this.columnIndex - 1);
    };

    Point.prototype.right = function() {
      return new FloodIt.Point(this.rowIndex, this.columnIndex + 1);
    };

    Point.prototype.up = function() {
      return new FloodIt.Point(this.rowIndex - 1, this.columnIndex);
    };

    Point.prototype.down = function() {
      return new FloodIt.Point(this.rowIndex + 1, this.columnIndex);
    };

    return Point;

  })();

  FloodIt.PlayGround = (function() {

    PlayGround.name = 'PlayGround';

    function PlayGround(rowCount, columnCount) {
      var columnIndex, rowIndex, _i, _j, _ref, _ref2;
      this.rowCount = rowCount;
      this.columnCount = columnCount;
      this.playGround = [];
      for (rowIndex = _i = 0, _ref = this.rowCount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; rowIndex = 0 <= _ref ? ++_i : --_i) {
        this.playGround.push([]);
        for (columnIndex = _j = 0, _ref2 = this.columnCount - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; columnIndex = 0 <= _ref2 ? ++_j : --_j) {
          this.playGround[rowIndex].push(0);
        }
      }
    }

    PlayGround.prototype.isPointInPlayGround = function(pointToCell) {
      if (!pointToCell instanceof FloodIt.Point) {
        throw new Error("ArgumentException: pointToCell is not instance of FloodIt.Point");
      }
      if (pointToCell.columnIndex < 0 || pointToCell.columnIndex >= this.columnCount) {
        return false;
      }
      if (pointToCell.rowIndex < 0 || pointToCell.rowIndex >= this.rowCount) {
        return false;
      }
      return true;
    };

    PlayGround.prototype.getCellValue = function(pointToCell) {
      if (this.isPointInPlayGround(pointToCell) === true) {
        return this.playGround[pointToCell.rowIndex][pointToCell.columnIndex];
      } else {
        throw new Error("ArgumentException: pointToCell");
      }
    };

    PlayGround.prototype.setCellValue = function(pointToCell, value) {
      if (this.isPointInPlayGround(pointToCell) === true) {
        this.playGround[pointToCell.rowIndex][pointToCell.columnIndex] = value;
        return value;
      } else {
        throw new Error("ArgumentException: pointToCell");
      }
    };

    return PlayGround;

  })();

  FloodIt.core = (function() {
    var floodFill;

    core.name = 'core';

    function core() {}

    floodFill = function(playGround, currentPoint, targetValue, replacementValue) {
      if (!playGround.isPointInPlayGround(currentPoint)) return;
      if (playGround.getCellValue(currentPoint) !== targetValue) return;
      playGround.setCellValue(currentPoint, replacementValue);
      floodFill(playGround, currentPoint.left(), targetValue, replacementValue);
      floodFill(playGround, currentPoint.right(), targetValue, replacementValue);
      floodFill(playGround, currentPoint.up(), targetValue, replacementValue);
      return floodFill(playGround, currentPoint.down(), targetValue, replacementValue);
    };

    core.flood = function(playGround, startPoint, replacementValue) {
      floodFill(playGround, startPoint, playGround.getCellValue(startPoint), replacementValue);
      return playGround;
    };

    return core;

  })();

}).call(this);
